// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using onlineShop.Data;

namespace onlineShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190822085152_ResetMigrationHistoryForPublicRepo")]
    partial class ResetMigrationHistoryForPublicRepo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("onlineShop.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Firstname");

                    b.Property<bool>("IsBlocked");

                    b.Property<string>("Lastname");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<DateTime>("RegisteredOn");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("onlineShop.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedOn");

                    b.Property<bool>("DisplayDate");

                    b.Property<bool>("IsPinned");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("LastModifiedById");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("Markup");

                    b.Property<int>("PreviewSize");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("onlineShop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("PictureId");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PictureId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("onlineShop.Models.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeType");

                    b.Property<DateTime>("DateChanged");

                    b.Property<string>("EmployeeId");

                    b.Property<string>("EntityName");

                    b.Property<string>("NewValue");

                    b.Property<string>("OldValue");

                    b.Property<string>("PrimaryKeyValue");

                    b.Property<string>("PropertyName");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("onlineShop.Models.CourierData", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<string>("Appartment");

                    b.Property<string>("Building");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Street");

                    b.HasKey("OrderId");

                    b.ToTable("CourierData");
                });

            modelBuilder.Entity("onlineShop.Models.CustomerAddress", b =>
                {
                    b.Property<string>("CustomerId");

                    b.Property<string>("Appartment");

                    b.Property<string>("Building");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Street");

                    b.HasKey("CustomerId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("onlineShop.Models.DeliveryDetails", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<string>("Comment");

                    b.Property<int>("DeliveryMethodType");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Firstname")
                        .IsRequired();

                    b.Property<string>("Lastname")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.HasKey("OrderId");

                    b.ToTable("DeliveryDetails");
                });

            modelBuilder.Entity("onlineShop.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("PictureId");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("onlineShop.Models.FilePath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path");

                    b.Property<int?>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("FilePaths");
                });

            modelBuilder.Entity("onlineShop.Models.LockerData", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<string>("LockerCode");

                    b.HasKey("OrderId");

                    b.ToTable("LockerData");
                });

            modelBuilder.Entity("onlineShop.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompletedOn");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CustomerId");

                    b.Property<double>("DeliveryFee");

                    b.Property<string>("LastModifiedById");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<int>("PaymentMethod");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("onlineShop.Models.OrderChangeLog", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<int>("ChangeLogId");

                    b.HasKey("OrderId", "ChangeLogId");

                    b.HasIndex("ChangeLogId");

                    b.ToTable("OrderChangeLogs");
                });

            modelBuilder.Entity("onlineShop.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.Property<double>("PurchasePrice");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("onlineShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddedBy");

                    b.Property<DateTime>("AddedOn");

                    b.Property<string>("CatalogCode")
                        .IsRequired();

                    b.Property<string>("ExtendedDescriptionMarkup");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastModifiedById");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("NumberInStock");

                    b.Property<string>("ProducerCode")
                        .IsRequired();

                    b.Property<double>("SalePrice");

                    b.Property<int>("SubcategoryId");

                    b.HasKey("Id");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("onlineShop.Models.ProductChangeLog", b =>
                {
                    b.Property<int>("ProductId");

                    b.Property<int>("ChangeLogId");

                    b.HasKey("ProductId", "ChangeLogId");

                    b.HasIndex("ChangeLogId");

                    b.ToTable("ProductChangeLogs");
                });

            modelBuilder.Entity("onlineShop.Models.ProductComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId");

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("GuestUserName");

                    b.Property<bool>("IsVerifiedPurchase");

                    b.Property<int>("ProductId");

                    b.Property<int>("RatingValue");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductComments");
                });

            modelBuilder.Entity("onlineShop.Models.ProductDescriptionField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DisplayInItemPreview");

                    b.Property<int>("DisplayOrderId");

                    b.Property<string>("Name");

                    b.Property<int?>("SubcategoryId");

                    b.HasKey("Id");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("ProductDescriptionFields");
                });

            modelBuilder.Entity("onlineShop.Models.ProductDescriptionItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FieldId");

                    b.Property<int>("ProductId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDescriptionItems");
                });

            modelBuilder.Entity("onlineShop.Models.ProductModels.ProductAvailabilityNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId");

                    b.Property<string>("Email");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ProductAvalabilityNotifications");
                });

            modelBuilder.Entity("onlineShop.Models.StoreData", b =>
                {
                    b.Property<int>("OrderId");

                    b.Property<string>("StoreCode");

                    b.HasKey("OrderId");

                    b.ToTable("StoreData");
                });

            modelBuilder.Entity("onlineShop.Models.Subcategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("PictureId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PictureId");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("onlineShop.Models.UserChangeLog", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChangeLogId");

                    b.HasKey("UserId", "ChangeLogId");

                    b.HasIndex("ChangeLogId");

                    b.ToTable("UserChangeLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("onlineShop.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("onlineShop.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("onlineShop.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("onlineShop.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.Blog", b =>
                {
                    b.HasOne("onlineShop.Models.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("onlineShop.Models.Category", b =>
                {
                    b.HasOne("onlineShop.Models.Department", "Department")
                        .WithMany("Categories")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("onlineShop.Models.FilePath", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");
                });

            modelBuilder.Entity("onlineShop.Models.ChangeLog", b =>
                {
                    b.HasOne("onlineShop.Models.AppUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("onlineShop.Models.CourierData", b =>
                {
                    b.HasOne("onlineShop.Models.DeliveryDetails")
                        .WithOne("CourierData")
                        .HasForeignKey("onlineShop.Models.CourierData", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.CustomerAddress", b =>
                {
                    b.HasOne("onlineShop.Models.AppUser", "Customer")
                        .WithOne("CustomerAddress")
                        .HasForeignKey("onlineShop.Models.CustomerAddress", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.DeliveryDetails", b =>
                {
                    b.HasOne("onlineShop.Models.Order")
                        .WithOne("DeliveryDetails")
                        .HasForeignKey("onlineShop.Models.DeliveryDetails", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.Department", b =>
                {
                    b.HasOne("onlineShop.Models.FilePath", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");
                });

            modelBuilder.Entity("onlineShop.Models.FilePath", b =>
                {
                    b.HasOne("onlineShop.Models.Product")
                        .WithMany("Pictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.LockerData", b =>
                {
                    b.HasOne("onlineShop.Models.DeliveryDetails")
                        .WithOne("LockerData")
                        .HasForeignKey("onlineShop.Models.LockerData", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.Order", b =>
                {
                    b.HasOne("onlineShop.Models.AppUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("onlineShop.Models.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("onlineShop.Models.OrderChangeLog", b =>
                {
                    b.HasOne("onlineShop.Models.ChangeLog", "ChangeLog")
                        .WithMany()
                        .HasForeignKey("ChangeLogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("onlineShop.Models.Order", "Order")
                        .WithMany("ChangeHistory")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.OrderItem", b =>
                {
                    b.HasOne("onlineShop.Models.Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("onlineShop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.Product", b =>
                {
                    b.HasOne("onlineShop.Models.AppUser", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("onlineShop.Models.Subcategory", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.ProductChangeLog", b =>
                {
                    b.HasOne("onlineShop.Models.ChangeLog", "ChangeLog")
                        .WithMany()
                        .HasForeignKey("ChangeLogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("onlineShop.Models.Product", "Product")
                        .WithMany("ChangeHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.ProductComment", b =>
                {
                    b.HasOne("onlineShop.Models.AppUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("onlineShop.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.ProductDescriptionField", b =>
                {
                    b.HasOne("onlineShop.Models.Subcategory", "Subcategory")
                        .WithMany("DescriptionFields")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("onlineShop.Models.ProductDescriptionItem", b =>
                {
                    b.HasOne("onlineShop.Models.ProductDescriptionField", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("onlineShop.Models.Product", "Product")
                        .WithMany("ProductDescriptionItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.ProductModels.ProductAvailabilityNotification", b =>
                {
                    b.HasOne("onlineShop.Models.AppUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("onlineShop.Models.StoreData", b =>
                {
                    b.HasOne("onlineShop.Models.DeliveryDetails")
                        .WithOne("StoreData")
                        .HasForeignKey("onlineShop.Models.StoreData", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("onlineShop.Models.Subcategory", b =>
                {
                    b.HasOne("onlineShop.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("onlineShop.Models.FilePath", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");
                });

            modelBuilder.Entity("onlineShop.Models.UserChangeLog", b =>
                {
                    b.HasOne("onlineShop.Models.ChangeLog", "ChangeLog")
                        .WithMany()
                        .HasForeignKey("ChangeLogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("onlineShop.Models.AppUser", "User")
                        .WithMany("ChangeHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
